# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_stream')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_stream')
    _stream = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_stream', [dirname(__file__)])
        except ImportError:
            import _stream
            return _stream
        try:
            _mod = imp.load_module('_stream', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _stream = swig_import_helper()
    del swig_import_helper
else:
    import _stream
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class _vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _vector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _stream._vector_x_set
    __swig_getmethods__["x"] = _stream._vector_x_get
    if _newclass:
        x = _swig_property(_stream._vector_x_get, _stream._vector_x_set)
    __swig_setmethods__["y"] = _stream._vector_y_set
    __swig_getmethods__["y"] = _stream._vector_y_get
    if _newclass:
        y = _swig_property(_stream._vector_y_get, _stream._vector_y_set)

    def __init__(self):
        this = _stream.new__vector()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _stream.delete__vector
    __del__ = lambda self: None
_vector_swigregister = _stream._vector_swigregister
_vector_swigregister(_vector)

class _tensor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _tensor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _tensor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _stream._tensor_x_set
    __swig_getmethods__["x"] = _stream._tensor_x_get
    if _newclass:
        x = _swig_property(_stream._tensor_x_get, _stream._tensor_x_set)
    __swig_setmethods__["y"] = _stream._tensor_y_set
    __swig_getmethods__["y"] = _stream._tensor_y_get
    if _newclass:
        y = _swig_property(_stream._tensor_y_get, _stream._tensor_y_set)

    def __init__(self):
        this = _stream.new__tensor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _stream.delete__tensor
    __del__ = lambda self: None
_tensor_swigregister = _stream._tensor_swigregister
_tensor_swigregister(_tensor)


def init_grid(n):
    return _stream.init_grid(n)
init_grid = _stream.init_grid

def free_grid():
    return _stream.free_grid()
free_grid = _stream.free_grid
class _origin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _origin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _origin, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _stream._origin_x_set
    __swig_getmethods__["x"] = _stream._origin_x_get
    if _newclass:
        x = _swig_property(_stream._origin_x_get, _stream._origin_x_set)
    __swig_setmethods__["y"] = _stream._origin_y_set
    __swig_getmethods__["y"] = _stream._origin_y_get
    if _newclass:
        y = _swig_property(_stream._origin_y_get, _stream._origin_y_set)
    __swig_setmethods__["z"] = _stream._origin_z_set
    __swig_getmethods__["z"] = _stream._origin_z_get
    if _newclass:
        z = _swig_property(_stream._origin_z_get, _stream._origin_z_set)

    def __init__(self):
        this = _stream.new__origin()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _stream.delete__origin
    __del__ = lambda self: None
_origin_swigregister = _stream._origin_swigregister
_origin_swigregister(_origin)


def origin(p):
    return _stream.origin(p)
origin = _stream.origin

def size(L):
    return _stream.size(L)
size = _stream.size

def py_scalar_init(s, f):
    return _stream.py_scalar_init(s, f)
py_scalar_init = _stream.py_scalar_init

def py_register_event(action, i, t):
    return _stream.py_register_event(action, i, t)
py_register_event = _stream.py_register_event

from numpy import empty_like
class scalar(int):
    def __new__(cls,i=None):
        if i == None:
            i = new_scalar("python")
        return int.__new__(cls,i)
    def __del__(self):
        if callable(_delete):
            _delete([self])
    def __setattr__(self, name, value):
        if name == "f":
            py_scalar_init(self,value)
        else:
            self.__dict__[name] = value
    def f(self,x,y=0):
        try:
            ndim = x.ndim
        except AttributeError:
            return interpolate(self,x,y)
        if ndim == 1:
            return _interpolate1D(self,x,x.size)
        elif ndim == 2:
            z = empty_like(x)
            _interpolate2D(self,x,y,z)
            return z
    def norm(self):
        return normf(self)
    def stats(self):
        return statsf(self)

class vector:
    def __init__(self,v):
        self.x = scalar(v.x)
        self.y = scalar(v.y)

class tensor:
    def __init__(self,t):
        self.x = vector(t.x)
        self.y = vector(t.y)

def event (action, i = None, t = None):
    py_register_event(action, i, t)

from random import uniform
def noise():
    return uniform(-1.,1.)


def new_scalar(name):
    return _stream.new_scalar(name)
new_scalar = _stream.new_scalar

def _delete(list):
    return _stream._delete(list)
_delete = _stream._delete
class norm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, norm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, norm, name)
    __repr__ = _swig_repr
    __swig_setmethods__["avg"] = _stream.norm_avg_set
    __swig_getmethods__["avg"] = _stream.norm_avg_get
    if _newclass:
        avg = _swig_property(_stream.norm_avg_get, _stream.norm_avg_set)
    __swig_setmethods__["rms"] = _stream.norm_rms_set
    __swig_getmethods__["rms"] = _stream.norm_rms_get
    if _newclass:
        rms = _swig_property(_stream.norm_rms_get, _stream.norm_rms_set)
    __swig_setmethods__["max"] = _stream.norm_max_set
    __swig_getmethods__["max"] = _stream.norm_max_get
    if _newclass:
        max = _swig_property(_stream.norm_max_get, _stream.norm_max_set)
    __swig_setmethods__["area"] = _stream.norm_area_set
    __swig_getmethods__["area"] = _stream.norm_area_get
    if _newclass:
        area = _swig_property(_stream.norm_area_get, _stream.norm_area_set)

    def __init__(self):
        this = _stream.new_norm()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _stream.delete_norm
    __del__ = lambda self: None
norm_swigregister = _stream.norm_swigregister
norm_swigregister(norm)


def normf(f):
    return _stream.normf(f)
normf = _stream.normf
class stats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["min"] = _stream.stats_min_set
    __swig_getmethods__["min"] = _stream.stats_min_get
    if _newclass:
        min = _swig_property(_stream.stats_min_get, _stream.stats_min_set)
    __swig_setmethods__["max"] = _stream.stats_max_set
    __swig_getmethods__["max"] = _stream.stats_max_get
    if _newclass:
        max = _swig_property(_stream.stats_max_get, _stream.stats_max_set)
    __swig_setmethods__["sum"] = _stream.stats_sum_set
    __swig_getmethods__["sum"] = _stream.stats_sum_get
    if _newclass:
        sum = _swig_property(_stream.stats_sum_get, _stream.stats_sum_set)
    __swig_setmethods__["stddev"] = _stream.stats_stddev_set
    __swig_getmethods__["stddev"] = _stream.stats_stddev_get
    if _newclass:
        stddev = _swig_property(_stream.stats_stddev_get, _stream.stats_stddev_set)
    __swig_setmethods__["area"] = _stream.stats_area_set
    __swig_getmethods__["area"] = _stream.stats_area_get
    if _newclass:
        area = _swig_property(_stream.stats_area_get, _stream.stats_area_set)

    def __init__(self):
        this = _stream.new_stats()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _stream.delete_stats
    __del__ = lambda self: None
stats_swigregister = _stream.stats_swigregister
stats_swigregister(stats)


def statsf(f):
    return _stream.statsf(f)
statsf = _stream.statsf

def vorticity(u, omega):
    return _stream.vorticity(u, omega)
vorticity = _stream.vorticity

def _interpolate1D(v, x, val):
    return _stream._interpolate1D(v, x, val)
_interpolate1D = _stream._interpolate1D

def _interpolate2D(v, x, y, val):
    return _stream._interpolate2D(v, x, y, val)
_interpolate2D = _stream._interpolate2D

def run():
    return _stream.run()
run = _stream.run
class mgstats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mgstats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mgstats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["i"] = _stream.mgstats_i_set
    __swig_getmethods__["i"] = _stream.mgstats_i_get
    if _newclass:
        i = _swig_property(_stream.mgstats_i_get, _stream.mgstats_i_set)
    __swig_setmethods__["resb"] = _stream.mgstats_resb_set
    __swig_getmethods__["resb"] = _stream.mgstats_resb_get
    if _newclass:
        resb = _swig_property(_stream.mgstats_resb_get, _stream.mgstats_resb_set)
    __swig_setmethods__["resa"] = _stream.mgstats_resa_set
    __swig_getmethods__["resa"] = _stream.mgstats_resa_get
    if _newclass:
        resa = _swig_property(_stream.mgstats_resa_get, _stream.mgstats_resa_set)
    __swig_setmethods__["sum"] = _stream.mgstats_sum_set
    __swig_getmethods__["sum"] = _stream.mgstats_sum_get
    if _newclass:
        sum = _swig_property(_stream.mgstats_sum_get, _stream.mgstats_sum_set)

    def __init__(self):
        this = _stream.new_mgstats()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _stream.delete_mgstats
    __del__ = lambda self: None
mgstats_swigregister = _stream.mgstats_swigregister
mgstats_swigregister(mgstats)

class Poisson(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Poisson, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Poisson, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _stream.Poisson_a_set
    __swig_getmethods__["a"] = _stream.Poisson_a_get
    if _newclass:
        a = _swig_property(_stream.Poisson_a_get, _stream.Poisson_a_set)
    __swig_setmethods__["b"] = _stream.Poisson_b_set
    __swig_getmethods__["b"] = _stream.Poisson_b_get
    if _newclass:
        b = _swig_property(_stream.Poisson_b_get, _stream.Poisson_b_set)
    __swig_setmethods__["alpha"] = _stream.Poisson_alpha_set
    __swig_getmethods__["alpha"] = _stream.Poisson_alpha_get
    if _newclass:
        alpha = _swig_property(_stream.Poisson_alpha_get, _stream.Poisson_alpha_set)
    __swig_setmethods__["_lambda"] = _stream.Poisson__lambda_set
    __swig_getmethods__["_lambda"] = _stream.Poisson__lambda_get
    if _newclass:
        _lambda = _swig_property(_stream.Poisson__lambda_get, _stream.Poisson__lambda_set)
    __swig_setmethods__["tolerance"] = _stream.Poisson_tolerance_set
    __swig_getmethods__["tolerance"] = _stream.Poisson_tolerance_get
    if _newclass:
        tolerance = _swig_property(_stream.Poisson_tolerance_get, _stream.Poisson_tolerance_set)
    __swig_setmethods__["nrelax"] = _stream.Poisson_nrelax_set
    __swig_getmethods__["nrelax"] = _stream.Poisson_nrelax_get
    if _newclass:
        nrelax = _swig_property(_stream.Poisson_nrelax_get, _stream.Poisson_nrelax_set)
    __swig_setmethods__["res"] = _stream.Poisson_res_set
    __swig_getmethods__["res"] = _stream.Poisson_res_get
    if _newclass:
        res = _swig_property(_stream.Poisson_res_get, _stream.Poisson_res_set)

    def __init__(self):
        this = _stream.new_Poisson()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _stream.delete_Poisson
    __del__ = lambda self: None
Poisson_swigregister = _stream.Poisson_swigregister
Poisson_swigregister(Poisson)


def _poisson(p):
    return _stream._poisson(p)
_poisson = _stream._poisson

def poisson(a,b,alpha=None,lambda0=0,tolerance=1e-3):
    p = Poisson()
    p.a = a
    p.b = b
    if alpha != None: p.alpha = alpha
    p._lambda = lambda0
    p.tolerance = tolerance
    return _poisson(p)


psi = scalar(_stream.cvar.psi)
omega = scalar(_stream.cvar.omega)
uf = vector(_stream.cvar.uf)

# This file is compatible with both classic and new-style classes.

cvar = _stream.cvar

